function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/* eslint-env jasmine */

var _libRefCountedTokenList = require('../lib/ref-counted-token-list');

var _libRefCountedTokenList2 = _interopRequireDefault(_libRefCountedTokenList);

'use babel';

describe('RefCountedTokenList', function () {
  var _ref = [];
  var list = _ref[0];

  beforeEach(function () {
    list = new _libRefCountedTokenList2['default']();
  });

  describe('::refCountForToken()', function () {
    return it('returns the correct count', function () {
      list.addToken('abc');
      expect(list.refCountForToken('abc')).toBe(1);

      list.addToken('abc');
      list.addToken('def');
      expect(list.refCountForToken('abc')).toBe(2);

      list.removeToken('abc');
      expect(list.refCountForToken('abc')).toBe(1);

      list.removeToken('abc');
      expect(list.refCountForToken('abc')).toBe(0);

      list.removeToken('abc');
      expect(list.refCountForToken('abc')).toBe(0);
    });
  });

  describe('when tokens are added to and removed from the list', function () {
    return it('maintains the token in the list until there are no more references', function () {
      expect(list.getTokens()).toEqual([]);

      list.addToken('abc');
      expect(list.getTokens()).toEqual(['abc']);
      expect(list.refCountForToken('abc')).toBe(1);

      list.addToken('abc');
      list.addToken('def');
      expect(list.getTokens()).toEqual(['abc', 'def']);
      expect(list.refCountForToken('abc')).toBe(2);

      list.removeToken('abc');
      expect(list.getTokens()).toEqual(['abc', 'def']);
      expect(list.refCountForToken('abc')).toBe(1);

      list.removeToken('def');
      expect(list.getTokens()).toEqual(['abc']);

      list.removeToken('abc');
      expect(list.getTokens()).toEqual([]);

      list.removeToken('abc');
      expect(list.getTokens()).toEqual([]);
    });
  });

  describe('when object tokens are added to and removed from the list', function () {
    describe('when the same tokens are used', function () {
      return it('maintains the token in the list until there are no more references', function () {
        expect(list.getTokens()).toEqual([]);

        var abcToken = { text: 'abc' };
        var defToken = { text: 'def' };
        list.addToken(abcToken, 'abc');
        expect(list.getTokens()).toEqual([abcToken]);

        list.addToken(abcToken, 'abc');
        list.addToken(defToken, 'def');
        expect(list.getTokens()).toEqual([abcToken, defToken]);

        list.removeToken(abcToken, 'abc');
        expect(list.getTokens()).toEqual([abcToken, defToken]);

        list.removeToken(defToken, 'def');
        expect(list.getTokens()).toEqual([abcToken]);

        list.removeToken(abcToken, 'abc');
        expect(list.getTokens()).toEqual([]);

        list.removeToken(abcToken, 'abc');
        expect(list.getTokens()).toEqual([]);
      });
    });

    describe('when tokens with the same key are used', function () {
      return it('maintains the token in the list until there are no more references', function () {
        expect(list.getTokens()).toEqual([]);

        list.addToken({ text: 'abc' }, 'abc');
        expect(list.getTokens()).toEqual([{ text: 'abc' }]);

        list.addToken({ text: 'abc' }, 'abc');
        list.addToken({ text: 'def' }, 'def');
        expect(list.getTokens()).toEqual([{ text: 'abc' }, { text: 'def' }]);

        expect(list.removeToken({ text: 'abc' }, 'abc')).toBe(true);
        expect(list.getTokens()).toEqual([{ text: 'abc' }, { text: 'def' }]);

        expect(list.removeToken('def')).toBe(true);
        expect(list.getTokens()).toEqual([{ text: 'abc' }]);

        expect(list.removeToken('abc')).toBe(true);
        expect(list.getTokens()).toEqual([]);

        expect(list.removeToken('abc')).toBe(false);
        expect(list.getTokens()).toEqual([]);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,