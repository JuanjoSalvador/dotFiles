function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/* eslint-env jasmine */

var _libSymbolStore = require('../lib/symbol-store');

var _libSymbolStore2 = _interopRequireDefault(_libSymbolStore);

var _selectorKit = require('selector-kit');

'use babel';

describe('SymbolStore', function () {
  var _ref = [];
  var store = _ref[0];
  var editor = _ref[1];

  beforeEach(function () {
    waitsForPromise(function () {
      return Promise.all([atom.packages.activatePackage('language-coffee-script'), atom.workspace.open('sample.coffee').then(function (e) {
        editor = e;
      })]);
    });

    runs(function () {
      store = new _libSymbolStore2['default'](/\b\w*[a-zA-Z_-]+\w*\b/g);

      editor.setText('');
      editor.getBuffer().onDidChange(function (_ref2) {
        var oldRange = _ref2.oldRange;
        var newRange = _ref2.newRange;
        return store.recomputeSymbolsForEditorInBufferRange(editor, oldRange.start, oldRange.getExtent(), newRange.getExtent());
      });
    });
  });

  describe('::symbolsForConfig(config)', function () {
    it('gets a list of symbols matching the passed in configuration', function () {
      var config = {
        'function': {
          selectors: _selectorKit.Selector.create('.function'),
          typePriority: 1
        }
      };

      editor.setText('\n\nabc = -> cats\n\navar = 1');

      var occurrences = store.symbolsForConfig(config, null, 'ab');
      expect(occurrences.length).toBe(1);
      expect(occurrences[0].symbol.text).toBe('abc');
      expect(occurrences[0].symbol.type).toBe('function');
    });

    it('updates the symbol types as new tokens come in', function () {
      var config = {
        variable: {
          selectors: _selectorKit.Selector.create('.variable'),
          typePriority: 2
        },
        'function': {
          selectors: _selectorKit.Selector.create('.function'),
          typePriority: 3
        },
        'class': {
          selectors: _selectorKit.Selector.create('.class.name'),
          typePriority: 4
        }
      };

      editor.setText('\n\nabc = -> cats\n\navar = 1');
      var occurrences = store.symbolsForConfig(config, null, 'a');

      expect(occurrences.length).toBe(2);
      expect(occurrences[0].symbol.text).toBe('abc');
      expect(occurrences[0].symbol.type).toBe('function');
      expect(occurrences[1].symbol.text).toBe('avar');
      expect(occurrences[1].symbol.type).toBe('variable');

      editor.setCursorBufferPosition([0, 0]);
      editor.insertText('class abc');
      occurrences = store.symbolsForConfig(config, null, 'a');

      expect(occurrences.length).toBe(2);
      expect(occurrences[0].symbol.text).toBe('abc');
      expect(occurrences[0].symbol.type).toBe('class');
      expect(occurrences[1].symbol.text).toBe('avar');
      expect(occurrences[1].symbol.type).toBe('variable');
    });

    it('returns symbols with an empty type', function () {
      var config = {
        '': {
          selectors: _selectorKit.Selector.create('.function'),
          typePriority: 1
        }
      };

      editor.setText('\n\nabc = -> cats\n\navar = 1');
      var occurrences = store.symbolsForConfig(config, null, 'a');

      expect(occurrences.length).toBe(1);
      expect(occurrences[0].symbol.text).toBe('abc');
      expect(occurrences[0].symbol.type).toBe('');
    });

    it('resets the types when a new config is used', function () {
      var config = {
        'function': {
          selectors: _selectorKit.Selector.create('.function'),
          typePriority: 1
        }
      };

      editor.setText('\n\nabc = -> cats\n\navar = 1');
      var occurrences = store.symbolsForConfig(config, null, 'a');

      expect(occurrences.length).toBe(1);
      expect(occurrences[0].symbol.text).toBe('abc');
      expect(occurrences[0].symbol.type).toBe('function');

      config = {
        'newtype': {
          selectors: _selectorKit.Selector.create('.function'),
          typePriority: 1
        }
      };

      editor.setText('\n\nabc = -> cats\n\navar = 1');
      occurrences = store.symbolsForConfig(config, null, 'a');

      expect(occurrences.length).toBe(1);
      expect(occurrences[0].symbol.text).toBe('abc');
      expect(occurrences[0].symbol.type).toBe('newtype');
    });

    it('doesn\'t override built-in suggestions with the symbols found in the buffer', function () {
      var config = {
        'function': {
          selectors: _selectorKit.Selector.create('.function'),
          typePriority: 1
        },
        'builtins': {
          suggestions: [{
            type: 'function',
            rightLabel: 'global function',
            text: 'ValueFromFile',
            description: 'Test description.'
          }]
        }
      };

      editor.moveToBottom();
      editor.insertText('ValueFromFile()');

      var occurrences = store.symbolsForConfig(config, [editor.getBuffer()], 'value');
      expect(occurrences.length).toBe(1);
      expect(occurrences[0].symbol.text).toBe('ValueFromFile');
      expect(occurrences[0].symbol.description).toBe('Test description.');
      expect(occurrences[0].symbol.rightLabel).toBe('global function');
    });
  });

  describe('when there are multiple files with tokens in the store', function () {
    var _ref3 = [];
    var config = _ref3[0];
    var editor1 = _ref3[1];
    var editor2 = _ref3[2];

    beforeEach(function () {
      config = { stuff: { selectors: _selectorKit.Selector.create('.text.plain.null-grammar') } };

      waitsForPromise(function () {
        return Promise.all([atom.workspace.open('one.txt').then(function (editor) {
          editor1 = editor;
        }), atom.workspace.open('two.txt').then(function (editor) {
          editor2 = editor;
        })]);
      });

      runs(function () {
        editor1.moveToBottom();
        editor1.insertText(' humongous hill');

        editor2.moveToBottom();
        editor2.insertText(' hello hola');

        var start = { row: 0, column: 0 };
        var oldExtent = { row: 0, column: 0 };
        store.recomputeSymbolsForEditorInBufferRange(editor1, start, oldExtent, editor1.getBuffer().getRange().getExtent());
        store.recomputeSymbolsForEditorInBufferRange(editor2, start, oldExtent, editor2.getBuffer().getRange().getExtent());
      });
    });

    describe('::symbolsForConfig(config)', function () {
      return it('returs symbols based on path', function () {
        var occurrences = store.symbolsForConfig(config, [editor1.getBuffer()], 'h');
        expect(occurrences).toHaveLength(2);
        expect(occurrences[0].symbol.text).toBe('humongous');
        expect(occurrences[1].symbol.text).toBe('hill');

        occurrences = store.symbolsForConfig(config, [editor2.getBuffer()], 'h');
        expect(occurrences).toHaveLength(2);
        expect(occurrences[0].symbol.text).toBe('hello');
        expect(occurrences[1].symbol.text).toBe('hola');
      });
    });

    describe('::clear()', function () {
      return describe('when a buffer is specified', function () {
        return it('removes only the path specified', function () {
          var occurrences = store.symbolsForConfig(config, null, 'h');
          expect(occurrences).toHaveLength(4);
          expect(occurrences[0].symbol.text).toBe('humongous');
          expect(occurrences[1].symbol.text).toBe('hill');
          expect(occurrences[2].symbol.text).toBe('hello');
          expect(occurrences[3].symbol.text).toBe('hola');

          store.clear(editor1.getBuffer());

          occurrences = store.symbolsForConfig(config, null, 'h');
          expect(occurrences).toHaveLength(2);
          expect(occurrences[0].symbol.text).toBe('hello');
          expect(occurrences[1].symbol.text).toBe('hola');
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,