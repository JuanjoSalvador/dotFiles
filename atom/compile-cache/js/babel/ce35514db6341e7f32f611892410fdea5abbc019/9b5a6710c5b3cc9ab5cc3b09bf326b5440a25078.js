'use babel';
/* eslint-env jasmine */

describe('FuzzyProvider', function () {
  var _ref = [];
  var completionDelay = _ref[0];
  var editor = _ref[1];
  var mainModule = _ref[2];
  var autocompleteManager = _ref[3];

  beforeEach(function () {
    atom.config.set('autocomplete-plus.includeCompletionsFromAllBuffers', false);

    // Set to live completion
    atom.config.set('autocomplete-plus.enableAutoActivation', true);
    atom.config.set('autocomplete-plus.defaultProvider', 'Fuzzy');

    // Set the completion delay
    completionDelay = 100;
    atom.config.set('autocomplete-plus.autoActivationDelay', completionDelay);
    completionDelay += 100; // Rendering delaya\

    var workspaceElement = atom.views.getView(atom.workspace);
    jasmine.attachToDOM(workspaceElement);
  });

  describe('when auto-activation is enabled', function () {
    beforeEach(function () {
      waitsForPromise(function () {
        return Promise.all([atom.packages.activatePackage('language-javascript'), atom.workspace.open('sample.js').then(function (e) {
          editor = e;
        }), atom.packages.activatePackage('autocomplete-plus').then(function (a) {
          mainModule = a.mainModule;
        })]);
      });

      runs(function () {
        autocompleteManager = mainModule.autocompleteManager;
        advanceClock(mainModule.autocompleteManager.providerManager.defaultProvider.deferBuildWordListInterval);
      });
    });

    it('adds words to the wordlist after they have been written', function () {
      editor.moveToBottom();
      editor.moveToBeginningOfLine();
      var provider = autocompleteManager.providerManager.defaultProvider;

      expect(provider.tokenList.getToken('somethingNew')).toBeUndefined();
      editor.insertText('somethingNew');
      expect(provider.tokenList.getToken('somethingNew')).toBe('somethingNew');
    });

    describe('when `editor.largeFileMode` is true', function () {
      return it("doesn't add words to the wordlist when the buffer changes", function () {
        var provider = autocompleteManager.providerManager.defaultProvider;
        var coffeeEditor = null;

        waitsForPromise(function () {
          return atom.packages.activatePackage('language-coffee-script');
        });

        waitsForPromise(function () {
          return atom.workspace.open('sample.coffee').then(function (e) {
            coffeeEditor = e;
            coffeeEditor.largeFileMode = true;
          });
        });

        runs(function () {
          advanceClock(provider.deferBuildWordListInterval);
          expect(provider.tokenList.getToken('SomeModule')).toBeUndefined();

          coffeeEditor.getBuffer().insert([0, 0], 'abc');
          advanceClock(provider.deferBuildWordListInterval);
          expect(provider.tokenList.getToken('abcSomeModule')).toBeUndefined();
        });
      });
    });

    it('removes words that are no longer in the buffer', function () {
      editor.moveToBottom();
      editor.moveToBeginningOfLine();
      var provider = autocompleteManager.providerManager.defaultProvider;

      expect(provider.tokenList.getToken('somethingNew')).toBeUndefined();
      editor.insertText('somethingNew');
      expect(provider.tokenList.getToken('somethingNew')).toBe('somethingNew');

      editor.backspace();
      expect(provider.tokenList.getToken('somethingNew')).toBe(undefined);
      expect(provider.tokenList.getToken('somethingNe')).toBe('somethingNe');
    });

    it('adds completions from editor.completions', function () {
      var provider = autocompleteManager.providerManager.defaultProvider;
      atom.config.set('editor.completions', ['abcd', 'abcde', 'abcdef'], { scopeSelector: '.source.js' });

      editor.moveToBottom();
      editor.insertText('ab');

      var bufferPosition = editor.getLastCursor().getBufferPosition();
      var scopeDescriptor = editor.getRootScopeDescriptor();
      var prefix = 'ab';

      var results = provider.getSuggestions({ editor: editor, bufferPosition: bufferPosition, scopeDescriptor: scopeDescriptor, prefix: prefix });
      expect(results[0].text).toBe('abcd');
    });

    it('adds completions from settings', function () {
      var provider = autocompleteManager.providerManager.defaultProvider;
      atom.config.set('editor.completions', { builtin: {
          suggestions: ['nope']
        } }, {
        scopeSelector: '.source.js'
      });

      editor.moveToBottom();
      editor.insertText('ab');

      var bufferPosition = editor.getLastCursor().getBufferPosition();
      var scopeDescriptor = editor.getRootScopeDescriptor();
      var prefix = 'ab';

      var results = provider.getSuggestions({ editor: editor, bufferPosition: bufferPosition, scopeDescriptor: scopeDescriptor, prefix: prefix });
      expect(results).toBeUndefined();
    });

    it('adds words to the wordlist with unicode characters', function () {
      atom.config.set('autocomplete-plus.enableExtendedUnicodeSupport', true);
      editor.moveToBottom();
      editor.moveToBeginningOfLine();
      var provider = autocompleteManager.providerManager.defaultProvider;

      expect(provider.tokenList.getToken('somēthingNew')).toBeUndefined();
      editor.insertText('somēthingNew');
      expect(provider.tokenList.getToken('somēthingNew')).toBe('somēthingNew');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,