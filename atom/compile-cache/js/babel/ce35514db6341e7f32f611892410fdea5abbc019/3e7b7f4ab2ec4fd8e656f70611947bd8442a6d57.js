
/* eslint-env jasmine */

var _specHelper = require('./spec-helper');

'use babel';

describe('Provider API', function () {
  var _ref = [];
  var completionDelay = _ref[0];
  var editor = _ref[1];
  var mainModule = _ref[2];
  var autocompleteManager = _ref[3];
  var registration = _ref[4];
  var testProvider = _ref[5];

  beforeEach(function () {
    runs(function () {
      // Set to live completion
      atom.config.set('autocomplete-plus.enableAutoActivation', true);
      atom.config.set('editor.fontSize', '16');

      // Set the completion delay
      completionDelay = 100;
      atom.config.set('autocomplete-plus.autoActivationDelay', completionDelay);
      completionDelay += 100; // Rendering

      var workspaceElement = atom.views.getView(atom.workspace);
      jasmine.attachToDOM(workspaceElement);
    });

    // Activate the package
    waitsForPromise(function () {
      return Promise.all([atom.packages.activatePackage('language-javascript'), atom.workspace.open('sample.js').then(function (e) {
        editor = e;
      }), atom.packages.activatePackage('autocomplete-plus').then(function (a) {
        mainModule = a.mainModule;
      })]);
    });

    waitsFor(function () {
      autocompleteManager = mainModule.autocompleteManager;
      return autocompleteManager;
    });
  });

  afterEach(function () {
    if (registration && registration.dispose) {
      registration.dispose();
    }
    registration = null;
    if (testProvider && testProvider.dispose) {
      testProvider.dispose();
    }
    testProvider = null;
  });

  describe('Provider API v2.0.0', function () {
    it('registers the provider specified by [provider]', function () {
      testProvider = {
        scopeSelector: '.source.js,.source.coffee',
        getSuggestions: function getSuggestions(options) {
          return [{ text: 'ohai', replacementPrefix: 'ohai' }];
        }
      };

      expect(autocompleteManager.providerManager.applicableProviders(editor, '.source.js').length).toEqual(1);
      registration = atom.packages.serviceHub.provide('autocomplete.provider', '2.0.0', [testProvider]);
      return expect(autocompleteManager.providerManager.applicableProviders(editor, '.source.js').length).toEqual(2);
    });

    it('registers the provider specified by the naked provider', function () {
      testProvider = {
        scopeSelector: '.source.js,.source.coffee',
        getSuggestions: function getSuggestions(options) {
          return [{ text: 'ohai', replacementPrefix: 'ohai' }];
        }
      };

      expect(autocompleteManager.providerManager.applicableProviders(editor, '.source.js').length).toEqual(1);
      registration = atom.packages.serviceHub.provide('autocomplete.provider', '2.0.0', testProvider);
      expect(autocompleteManager.providerManager.applicableProviders(editor, '.source.js').length).toEqual(2);
    });

    it('passes the correct parameters to getSuggestions for the version', function () {
      testProvider = {
        scopeSelector: '.source.js,.source.coffee',
        getSuggestions: function getSuggestions(options) {
          return [{ text: 'ohai', replacementPrefix: 'ohai' }];
        }
      };

      registration = atom.packages.serviceHub.provide('autocomplete.provider', '2.0.0', testProvider);

      spyOn(testProvider, 'getSuggestions');
      (0, _specHelper.triggerAutocompletion)(editor, true, 'o');

      runs(function () {
        var args = testProvider.getSuggestions.mostRecentCall.args[0];
        expect(args.editor).toBeDefined();
        expect(args.bufferPosition).toBeDefined();
        expect(args.scopeDescriptor).toBeDefined();
        expect(args.prefix).toBeDefined();

        expect(args.scope).not.toBeDefined();
        expect(args.scopeChain).not.toBeDefined();
        expect(args.buffer).not.toBeDefined();
        expect(args.cursor).not.toBeDefined();
      });
    });

    it('correctly displays the suggestion options', function () {
      testProvider = {
        scopeSelector: '.source.js, .source.coffee',
        getSuggestions: function getSuggestions(options) {
          return [{
            text: 'ohai',
            replacementPrefix: 'o',
            rightLabelHTML: '<span style="color: red">ohai</span>',
            description: 'There be documentation'
          }];
        }
      };
      registration = atom.packages.serviceHub.provide('autocomplete.provider', '2.0.0', testProvider);

      (0, _specHelper.triggerAutocompletion)(editor, true, 'o');

      runs(function () {
        var suggestionListView = autocompleteManager.suggestionList.suggestionListElement;
        expect(suggestionListView.element.querySelector('li .right-label')).toHaveHtml('<span style="color: red">ohai</span>');
        expect(suggestionListView.element.querySelector('.word')).toHaveText('ohai');
        expect(suggestionListView.element.querySelector('.suggestion-description-content')).toHaveText('There be documentation');
        expect(suggestionListView.element.querySelector('.suggestion-description-more-link').style.display).toBe('none');
      });
    });

    it('favors the `displayText` over text or snippet suggestion options', function () {
      testProvider = {
        scopeSelector: '.source.js, .source.coffee',
        getSuggestions: function getSuggestions(options) {
          return [{
            text: 'ohai',
            snippet: 'snippet',
            displayText: 'displayOHAI',
            replacementPrefix: 'o',
            rightLabelHTML: '<span style="color: red">ohai</span>',
            description: 'There be documentation'
          }];
        }
      };
      registration = atom.packages.serviceHub.provide('autocomplete.provider', '2.0.0', testProvider);

      (0, _specHelper.triggerAutocompletion)(editor, true, 'o');

      runs(function () {
        var suggestionListView = autocompleteManager.suggestionList.suggestionListElement;
        expect(suggestionListView.element.querySelector('.word')).toHaveText('displayOHAI');
      });
    });

    it('correctly displays the suggestion description and More link', function () {
      testProvider = {
        scopeSelector: '.source.js, .source.coffee',
        getSuggestions: function getSuggestions(options) {
          return [{
            text: 'ohai',
            replacementPrefix: 'o',
            rightLabelHTML: '<span style="color: red">ohai</span>',
            description: 'There be documentation',
            descriptionMoreURL: 'http://google.com'
          }];
        }
      };
      registration = atom.packages.serviceHub.provide('autocomplete.provider', '2.0.0', testProvider);

      (0, _specHelper.triggerAutocompletion)(editor, true, 'o');

      runs(function () {
        var suggestionListView = autocompleteManager.suggestionList.suggestionListElement;
        var content = suggestionListView.element.querySelector('.suggestion-description-content');
        var moreLink = suggestionListView.element.querySelector('.suggestion-description-more-link');
        expect(content).toHaveText('There be documentation');
        expect(moreLink).toHaveText('More..');
        expect(moreLink.style.display).toBe('inline');
        expect(moreLink.getAttribute('href')).toBe('http://google.com');
      });
    });

    describe('when the filterSuggestions option is set to true', function () {
      var getSuggestions = function getSuggestions() {
        return autocompleteManager.suggestionList.items.map(function (_ref2) {
          var text = _ref2.text;
          return { text: text };
        });
      };

      beforeEach(function () {
        return editor.setText('');
      });

      it('filters suggestions based on the default prefix', function () {
        testProvider = {
          scopeSelector: '.source.js',
          filterSuggestions: true,
          getSuggestions: function getSuggestions(options) {
            return [{ text: 'okwow' }, { text: 'ohai' }, { text: 'ok' }, { text: 'cats' }, { text: 'something' }];
          }
        };
        registration = atom.packages.serviceHub.provide('autocomplete.provider', '2.0.0', testProvider);

        editor.insertText('o');
        editor.insertText('k');
        (0, _specHelper.waitForAutocomplete)();

        runs(function () {
          return expect(getSuggestions()).toEqual([{ text: 'ok' }, { text: 'okwow' }]);
        });
      });

      it('filters suggestions based on the specified replacementPrefix for each suggestion', function () {
        testProvider = {
          scopeSelector: '.source.js',
          filterSuggestions: true,
          getSuggestions: function getSuggestions(options) {
            return [{ text: 'ohai' }, { text: 'hai' }, { text: 'okwow', replacementPrefix: 'k' }, { text: 'ok', replacementPrefix: 'nope' }, { text: '::cats', replacementPrefix: '::c' }, { text: 'something', replacementPrefix: 'sm' }];
          }
        };
        registration = atom.packages.serviceHub.provide('autocomplete.provider', '2.0.0', testProvider);

        editor.insertText('h');
        (0, _specHelper.waitForAutocomplete)();

        runs(function () {
          return expect(getSuggestions()).toEqual([{ text: '::cats' }, { text: 'hai' }, { text: 'something' }]);
        });
      });

      it('allows all suggestions when the prefix is an empty string / space', function () {
        testProvider = {
          scopeSelector: '.source.js',
          filterSuggestions: true,
          getSuggestions: function getSuggestions(options) {
            return [{ text: 'ohai' }, { text: 'hai' }, { text: 'okwow', replacementPrefix: ' ' }, { text: 'ok', replacementPrefix: 'nope' }];
          }
        };
        registration = atom.packages.serviceHub.provide('autocomplete.provider', '2.0.0', testProvider);

        editor.insertText('h');
        editor.insertText(' ');
        (0, _specHelper.waitForAutocomplete)();

        runs(function () {
          return expect(getSuggestions()).toEqual([{ text: 'ohai' }, { text: 'hai' }, { text: 'okwow' }]);
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,