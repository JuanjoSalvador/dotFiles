(function() {
  module.exports = function(colorPicker) {
    return {
      Emitter: (require('../modules/Emitter'))(),
      element: null,
      control: null,
      canvas: null,
      emitSelectionChanged: function() {
        return this.Emitter.emit('selectionChanged', this.control.selection);
      },
      onSelectionChanged: function(callback) {
        return this.Emitter.on('selectionChanged', callback);
      },
      emitColorChanged: function() {
        return this.Emitter.emit('colorChanged', this.control.selection.color);
      },
      onColorChanged: function(callback) {
        return this.Emitter.on('colorChanged', callback);
      },
      activate: function() {
        var Body;
        Body = colorPicker.getExtension('Body');
        this.element = {
          el: (function() {
            var _classPrefix, _el;
            _classPrefix = Body.element.el.className;
            _el = document.createElement('div');
            _el.classList.add(_classPrefix + "-alpha");
            return _el;
          })(),
          width: 0,
          height: 0,
          getWidth: function() {
            return this.width || this.el.offsetWidth;
          },
          getHeight: function() {
            return this.height || this.el.offsetHeight;
          },
          rect: null,
          getRect: function() {
            return this.rect || this.updateRect();
          },
          updateRect: function() {
            return this.rect = this.el.getClientRects()[0];
          },
          add: function(element) {
            this.el.appendChild(element);
            return this;
          }
        };
        Body.element.add(this.element.el, 1);
        colorPicker.onOpen((function(_this) {
          return function() {
            return _this.element.updateRect();
          };
        })(this));
        setTimeout((function(_this) {
          return function() {
            var Alpha, Saturation, _elementHeight, _elementWidth;
            Alpha = _this;
            Saturation = colorPicker.getExtension('Saturation');
            _elementWidth = _this.element.getWidth();
            _elementHeight = _this.element.getHeight();
            _this.canvas = {
              el: (function() {
                var _el;
                _el = document.createElement('canvas');
                _el.width = _elementWidth;
                _el.height = _elementHeight;
                _el.classList.add(Alpha.element.el.className + "-canvas");
                return _el;
              })(),
              context: null,
              getContext: function() {
                return this.context || (this.context = this.el.getContext('2d'));
              },
              previousRender: null,
              render: function(smartColor) {
                var _context, _gradient, _rgb;
                _rgb = ((function() {
                  if (!smartColor) {
                    return colorPicker.SmartColor.HEX('#f00');
                  } else {
                    return smartColor;
                  }
                })()).toRGBArray().join(',');
                if (this.previousRender && this.previousRender === _rgb) {
                  return;
                }
                _context = this.getContext();
                _context.clearRect(0, 0, _elementWidth, _elementHeight);
                _gradient = _context.createLinearGradient(0, 0, 1, _elementHeight);
                _gradient.addColorStop(.01, "rgba(" + _rgb + ",1)");
                _gradient.addColorStop(.99, "rgba(" + _rgb + ",0)");
                _context.fillStyle = _gradient;
                _context.fillRect(0, 0, _elementWidth, _elementHeight);
                return this.previousRender = _rgb;
              }
            };
            Saturation.onColorChanged(function(smartColor) {
              return _this.canvas.render(smartColor);
            });
            _this.canvas.render();
            return _this.element.add(_this.canvas.el);
          };
        })(this));
        setTimeout((function(_this) {
          return function() {
            var Alpha, Saturation, hasChild;
            hasChild = function(element, child) {
              var _parent;
              if (child && (_parent = child.parentNode)) {
                if (child === element) {
                  return true;
                } else {
                  return hasChild(element, _parent);
                }
              }
              return false;
            };
            Alpha = _this;
            Saturation = colorPicker.getExtension('Saturation');
            _this.control = {
              el: (function() {
                var _el;
                _el = document.createElement('div');
                _el.classList.add(Alpha.element.el.className + "-control");
                return _el;
              })(),
              isGrabbing: false,
              previousControlPosition: null,
              updateControlPosition: function(y) {
                var _joined;
                _joined = "," + y;
                if (this.previousControlPosition && this.previousControlPosition === _joined) {
                  return;
                }
                requestAnimationFrame((function(_this) {
                  return function() {
                    return _this.el.style.top = y + "px";
                  };
                })(this));
                return this.previousControlPosition = _joined;
              },
              selection: {
                y: 0,
                color: null,
                alpha: null
              },
              setSelection: function(e, alpha, offset) {
                var _RGBAArray, _alpha, _height, _position, _rect, _smartColor, _width, _y;
                if (alpha == null) {
                  alpha = null;
                }
                if (offset == null) {
                  offset = null;
                }
                _rect = Alpha.element.getRect();
                _width = Alpha.element.getWidth();
                _height = Alpha.element.getHeight();
                if (e) {
                  _y = e.pageY - _rect.top;
                } else if (typeof alpha === 'number') {
                  _y = _height - (alpha * _height);
                } else if (typeof offset === 'number') {
                  _y = this.selection.y + offset;
                } else {
                  _y = this.selection.y;
                }
                _y = this.selection.y = Math.max(0, Math.min(_height, _y));
                _alpha = 1 - (_y / _height);
                this.selection.alpha = (Math.round(_alpha * 100)) / 100;
                if (_smartColor = this.selection.color) {
                  _RGBAArray = _smartColor.toRGBAArray();
                  _RGBAArray[3] = this.selection.alpha;
                  this.selection.color = colorPicker.SmartColor.RGBAArray(_RGBAArray);
                  Alpha.emitColorChanged();
                } else {
                  this.selection.color = colorPicker.SmartColor.RGBAArray([255, 0, 0, this.selection.alpha]);
                }
                _position = {
                  y: Math.max(3, Math.min(_height - 6, _y))
                };
                this.updateControlPosition(_position.y);
                return Alpha.emitSelectionChanged();
              },
              refreshSelection: function() {
                return this.setSelection();
              }
            };
            _this.control.refreshSelection();
            colorPicker.onInputColor(function(smartColor) {
              return _this.control.setSelection(null, smartColor.getAlpha());
            });
            colorPicker.onOpen(function() {
              return _this.control.isGrabbing = false;
            });
            colorPicker.onClose(function() {
              return _this.control.isGrabbing = false;
            });
            Saturation.onColorChanged(function(smartColor) {
              _this.control.selection.color = smartColor;
              return _this.control.refreshSelection();
            });
            colorPicker.onMouseDown(function(e, isOnPicker) {
              if (!(isOnPicker && hasChild(Alpha.element.el, e.target))) {
                return;
              }
              e.preventDefault();
              _this.control.isGrabbing = true;
              return _this.control.setSelection(e);
            });
            colorPicker.onMouseMove(function(e) {
              if (!_this.control.isGrabbing) {
                return;
              }
              return _this.control.setSelection(e);
            });
            colorPicker.onMouseUp(function(e) {
              if (!_this.control.isGrabbing) {
                return;
              }
              _this.control.isGrabbing = false;
              return _this.control.setSelection(e);
            });
            colorPicker.onMouseWheel(function(e, isOnPicker) {
              if (!(isOnPicker && hasChild(Alpha.element.el, e.target))) {
                return;
              }
              e.preventDefault();
              return _this.control.setSelection(null, null, e.wheelDeltaY * .33);
            });
            return _this.element.add(_this.control.el);
          };
        })(this));
        return this;
      }
    };
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
